import KinectPV2.KJoint;
import KinectPV2.*;
import processing.sound.*;
SoundFile file;
KinectPV2 kinect;
float x1 = 0;
float x2 = 0;
float y1 = 0;
float y2 = 0;
float z1 = 0;
float z2 = 0;
float px1,py1,pz1,px2,py2,pz2;
float pmillis, cmillis;
int tj, c=0,i=0;
void setup() {
  size(1920, 1080,P3D);

  kinect = new KinectPV2(this);

  kinect.enableSkeletonColorMap(true);
  kinect.enableColorImg(true);
  cam = new PeasyCam(this,100);
  translate(-width/2,-height/2);
  cam.setMinimumDistance(1000);
  cam.setMaximumDistance(5000);
  frameRate(30);
  //file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/Linkin Park - Numb Piano.mp3");
  //file.jump(5.0);
  //file.loop();
  
  kinect.init();
}

void draw() {
  translate(-width/2,-height/2);
 if (tj == 1)  delay(100);
 tj =0;
  //image(kinect.getColorImage(), 0, 0, width, height);
  background(random(255),random(255),random(255));
fill(255);
rectMode(CENTER);
stroke(180,90,45);
strokeWeight(8);
fill(180,90,45);
ellipse(675,960,150,90);
ellipse(750,710,200,100);
ellipse(1170,710,200,100);
ellipse(1245,960,150,90);

stroke(255);
rect(675,915,150,90);
rect(750,665,200,90);
rect(1170,665,200,90);
rect(1245,915,150,90);

stroke(130,10,10);
line(600,860,600,960);
line(750,860,750,960);
line(675,905,675,1005);
line(650,610,650,710);
line(850,610,850,710);
line(750,655,750,755);
line(1070,610,1070,710);
line(1270,610,1270,710);
line(1170,655,1170,755);
line(1170,860,1170,960);
line(1320,860,1320,960);
line(1245,905,1245,1005);



stroke(0);
strokeWeight(15);
line(400,290,400,500);
line(400,500,300,550);
line(400,500,500,550);
line(400,500,400,530);
line(1520,290,1520,500);
line(1520,500,1420,550);
line(1520,500,1620,550);
line(1520,500,1520,530);

stroke(0);
strokeWeight(15);
fill(255);

ellipse(675,860,150,90);
ellipse(750,610,200,100);
ellipse(1170,610,200,100);
ellipse(1245,860,150,90);

strokeWeight(10);
ellipse(960,300,400,400);
fill(255,215,0);
ellipse(400,250,400,80);
ellipse(1520,250,400,80);

stroke(180,90,45);
strokeWeight(8);
line(600,960,750,960);
line(650,710,850,710);
line(1070,710,1270,710);
line(1170,960,1320,960);

stroke(130,10,10);fill(180,90,45);
arc(675,960,150,90,0,PI);
arc(750,710,200,100,0,PI);
arc(1170,710,200,100,0,PI);
arc(1245,960,150,90,0,PI);


strokeWeight(20);
stroke(255,215,0);

if(((x1>=600)&&(x1<=750)&&(y1>=815)&&(y1<=905)) && !((px1>=600)&&(px1<=750)&&(py1>=815)&&(py1<=905))) {
fill(150);
ellipse(675,860,150,90);
stroke(150);
strokeWeight(8);
line(612.5,870,737.5,870);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/CP.mp3");
  file.play();
  tj=1;
}
if(((x2>=600)&&(x2<=750)&&(y2>=815)&&(y2<=905))&& !((px2>=600)&&(px2<=750)&&(py2>=815)&&(py2<=905))){
fill(150);
ellipse(675,860,150,90);
stroke(150);
strokeWeight(8);
line(612.5,870,737.5,870);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/CP.mp3");
  file.play();
  tj=1;
}
if(((x1>=650)&&(x1<=850)&&(y1>=560)&&(y1<=670))&& !((px1>=650)&&(px1<=850)&&(py1>=560)&&(py1<=670))){
fill(150);
ellipse(750,610,200,100);
stroke(150);
strokeWeight(8);
line(662.5,620,837.5,620);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/SD0010.mp3");
  file.play();
  tj=1;
}
if(((x2>=650)&&(x2<=850)&&(y2>=560)&&(y2<=670)) && !((px2>=650)&&(px2<=850)&&(py2>=560)&&(py2<=670))){
fill(150);
ellipse(750,610,200,100);
stroke(150);
strokeWeight(8);
line(662.5,620,837.5,620);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/SD0010.mp3");
  file.play();
  tj=1;
}
if(((x1>=760)&&(x1<=1160)&&(y1>=100)&&(y1<=500))&& !((px1>=760)&&(px1<=1160)&&(py1>=100)&&(py1<=500))){
fill(150);
ellipse(960,300,400,400);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDSnare3.mp3");
  file.play();
  tj=1;
}
if(((x2>=760)&&(x2<=1160)&&(y2>=100)&&(y2<=500))&& !((px2>=760)&&(px2<=1160)&&(py2>=100)&&(py2<=500))){
fill(150);
ellipse(960,300,400,400);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDSnare3.mp3");
  file.play();
  tj=1;
}
if(((x1>=1070)&&(x1<=1270)&&(y1>=560)&&(y1<=670))&& !((px1>=1070)&&(px1<=1270)&&(py1>=560)&&(py1<=670))){
fill(150);
ellipse(1170,610,200,100);
stroke(150);
strokeWeight(8);
line(1082.5,620,1257.5,620);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDHiTom3.mp3");
  file.play();
  tj=1;
}
if(((x2>=1070)&&(x2<=1270)&&(y2>=560)&&(y2<=670))&& !((px2>=1070)&&(px2<=1270)&&(py2>=560)&&(py2<=670))){
fill(150);
ellipse(1170,610,200,100);
stroke(150);
strokeWeight(8);
line(1082.5,620,1257.5,620);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDHiTom3.mp3");
  file.play();
  tj=1;
}
if(((x1>=1170)&&(x1<=1320)&&(y1>=815)&&(y1<=905))&& !((px1>=1170)&&(px1<=1320)&&(py1>=815)&&(py1<=905))){
fill(150);
ellipse(1245,860,150,90);
stroke(150);
strokeWeight(8);
line(1182.5,870,1307.5,870);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDTimbaleHigh.mp3");
  file.play();
  tj=1;
}
if(((x2>=1170)&&(x2<=1320)&&(y2>=815)&&(y2<=905))&& !((px2>=1170)&&(px2<=1320)&&(py2>=815)&&(py2<=905))){
fill(150);
ellipse(1245,860,150,90);
stroke(150);
strokeWeight(8);
line(1182.5,870,1307.5,870);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/MDTimbaleHigh.mp3");
  file.play();
  tj=1;
}
if(((x1>=200)&&(x1<=600)&&(y1>=210)&&(y1<=290))&& !((px1>=200)&&(px1<=600)&&(py1>=210)&&(py1<=290))){
fill(255,215,0);
stroke(200,0,0);strokeWeight(5);
ellipse(400,250,210,45);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/Cymbale2.wav");
  file.play();
  tj=1;
}
if(((x2>=200)&&(x2<=600)&&(y2>=210)&&(y2<=290))&& !((px2>=200)&&(px2<=600)&&(py2>=210)&&(py2<=290))){
fill(255,215,0);
stroke(200,0,0);strokeWeight(5);
ellipse(400,250,210,45);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/Cymbale2.wav");
  file.play();
  tj=1;
}
if(((x1>=1320)&&(x1<=1620)&&(y1>=210)&&(y1<=290))&& !((px1>=1320)&&(px1<=1620)&&(py1>=210)&&(py1<=290))){
fill(255,215,0);
stroke(200,0,0);strokeWeight(5);
ellipse(1520,250,210,45);
 file = new SoundFile(this, "C:/Users/DELL/Downloads/BEAT/CYMBAL4.mp3");
  file.play();
  tj=1;
}
if(((mouseX>=1320)&&(mouseX<=1620)&&(mouseY>=210)&&(mouseY<=290))&& !((px2>=1320)&&(px2<=1620)&&(py2>=210)&&(py2<=290))){
fill(255,215,0);
stroke(200,0,0);strokeWeight(5);
ellipse(1520,250,210,45);
 file = new SoundFile(this, "C:/Users/LENOVO/Downloads/57[kb]hardcoreverb2.mp3");
  file.play();
  tj=1;
}
stroke(0);
strokeWeight(10);
fill(0);
triangle(960,200,873.4,350,1046.6,350);
triangle(960,400,873.4,250,1046.6,250);
triangle(400,245,390,250,410,250);
triangle(1520,245,1510,250,1530,250);


  ArrayList<KSkeleton> skeletonArray =  kinect.getSkeletonColorMap();

  //individual JOINTS
  for (int i = 0; i < skeletonArray.size(); i++) {
    KSkeleton skeleton = (KSkeleton) skeletonArray.get(i);
    if (skeleton.isTracked()) {
      KJoint[] joints = skeleton.getJoints();

      color col  = skeleton.getIndexColor();
      fill(col);
      stroke(col);
      drawBody(joints);

      //draw different color for each hand state
       drawHandState(joints[KinectPV2.JointType_HandLeft]);
       
      drawHandState(joints[KinectPV2.JointType_HandRight]);
     
    }
  }

  fill(255, 0, 0);
  text(frameRate, 50, 50);
  

}

//DRAW BODY
void drawBody(KJoint[] joints) {
  drawBone(joints, KinectPV2.JointType_Head, KinectPV2.JointType_Neck);
  drawBone(joints, KinectPV2.JointType_Neck, KinectPV2.JointType_SpineShoulder);
  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_SpineMid);
  drawBone(joints, KinectPV2.JointType_SpineMid, KinectPV2.JointType_SpineBase);
  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_ShoulderRight);
  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_ShoulderLeft);
  drawBone(joints, KinectPV2.JointType_SpineBase, KinectPV2.JointType_HipRight);
  drawBone(joints, KinectPV2.JointType_SpineBase, KinectPV2.JointType_HipLeft);

  // Right Arm
  drawBone(joints, KinectPV2.JointType_ShoulderRight, KinectPV2.JointType_ElbowRight);
  drawBone(joints, KinectPV2.JointType_ElbowRight, KinectPV2.JointType_WristRight);
  drawBone(joints, KinectPV2.JointType_WristRight, KinectPV2.JointType_HandRight);
  drawBone(joints, KinectPV2.JointType_HandRight, KinectPV2.JointType_HandTipRight);
  drawBone(joints, KinectPV2.JointType_WristRight, KinectPV2.JointType_ThumbRight);

  // Left Arm
  drawBone(joints, KinectPV2.JointType_ShoulderLeft, KinectPV2.JointType_ElbowLeft);
  drawBone(joints, KinectPV2.JointType_ElbowLeft, KinectPV2.JointType_WristLeft);
  drawBone(joints, KinectPV2.JointType_WristLeft, KinectPV2.JointType_HandLeft);
  drawBone(joints, KinectPV2.JointType_HandLeft, KinectPV2.JointType_HandTipLeft);
  drawBone(joints, KinectPV2.JointType_WristLeft, KinectPV2.JointType_ThumbLeft);

  // Right Leg
  drawBone(joints, KinectPV2.JointType_HipRight, KinectPV2.JointType_KneeRight);
  drawBone(joints, KinectPV2.JointType_KneeRight, KinectPV2.JointType_AnkleRight);
  drawBone(joints, KinectPV2.JointType_AnkleRight, KinectPV2.JointType_FootRight);

  // Left Leg
  drawBone(joints, KinectPV2.JointType_HipLeft, KinectPV2.JointType_KneeLeft);
  drawBone(joints, KinectPV2.JointType_KneeLeft, KinectPV2.JointType_AnkleLeft);
  drawBone(joints, KinectPV2.JointType_AnkleLeft, KinectPV2.JointType_FootLeft);

  drawJoint(joints, KinectPV2.JointType_HandTipLeft);
  drawJoint(joints, KinectPV2.JointType_HandTipRight);
  drawJoint(joints, KinectPV2.JointType_FootLeft);
  drawJoint(joints, KinectPV2.JointType_FootRight);

  drawJoint(joints, KinectPV2.JointType_ThumbLeft);
  drawJoint(joints, KinectPV2.JointType_ThumbRight);

  drawJoint(joints, KinectPV2.JointType_Head);
}

//draw joint
void drawJoint(KJoint[] joints, int jointType) {
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  ellipse(0, 0, 25, 25);
  popMatrix();
}

//draw bone
void drawBone(KJoint[] joints, int jointType1, int jointType2) {
  pushMatrix();
  translate(joints[jointType1].getX(), joints[jointType1].getY(), joints[jointType1].getZ());
  ellipse(0, 0, 25, 25);
  popMatrix();
  line(joints[jointType1].getX(), joints[jointType1].getY(), joints[jointType1].getZ(), joints[jointType2].getX(), joints[jointType2].getY(), joints[jointType2].getZ());
}

//draw hand state
void drawHandState(KJoint joint) {
  noStroke();
  px2 = x2;
  py2 = y2;
  handState(joint.getState());
  pushMatrix();
  translate(joint.getX(), joint.getY(), joint.getZ());
  if(c==0)
  {
     px1 = x1;
     py1 = y1;
     pz1 = z1;
    x1=joint.getX();
    y1=joint.getY();
    z1=joint.getZ();
    
  }
  if(c==1)
  {
    px2 = x2;
    py2 = y2;
    pz2 = z2;
    x2=joint.getX();
    y2=joint.getY();
    z2=joint.getZ();
    c=-1;
  }
  
  c++;
  ellipse(0, 0, 70, 70);
  popMatrix();
}

/*
Different hand state
 KinectPV2.HandState_Open
 KinectPV2.HandState_Closed
 KinectPV2.HandState_Lasso
 KinectPV2.HandState_NotTracked
 */
void handState(int handState) {
  switch(handState) {
  case KinectPV2.HandState_Open:
    fill(0, 255, 0);
    break;
  case KinectPV2.HandState_Closed:
    fill(255, 0, 0);
    break;
  case KinectPV2.HandState_Lasso:
    fill(0, 0, 255);
    break;
  case KinectPV2.HandState_NotTracked:
    fill(255, 255, 255);
    break;
  }
}
